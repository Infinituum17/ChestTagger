plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "labellingcontainers-common.mixins.json"
        mixinConfig "external.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // FastConfigAPI
    modApi("infinituum.fastconfigapi:fastconfigapi-forge:${rootProject.fastconfigapi_version}")

    // Iron Chests
    modCompileOnly "curse.maven:iron-chests-228756:4614846"

    // Colossal Chests
    modCompileOnly "curse.maven:colossal-chests-237875:4517669"
    modCompileOnly "curse.maven:cyclops-core-232758:4578164"

    // Echo Chest mod
    modCompileOnly "curse.maven:puzzles-lib-495476:4582313"
    modCompileOnly "curse.maven:echo-chest-857972:4552568"

    // Nether Chested mod
    modCompileOnly "curse.maven:new-nether-chest-857971:4552680"

    // Supplementaries mod
    modImplementation "curse.maven:selene-499980:4561896"
    modImplementation "curse.maven:supplementaries-412082:4620166"
}

processResources {
    var rep_properties = [
            "version"              : rootProject.mod_version,
            "forge_maj_version"    : ((String) rootProject.forge_version).split("-")[1].split("\\.")[0],
            "mc_version"           : rootProject.minecraft_version,
            "arch_version"         : rootProject.architectury_version,
            "pack_format_version"  : rootProject.pack_format_version,
            "modid"                : rootProject.archives_base_name,
            "fastconfigapi_version": rootProject.fastconfigapi_version
    ]

    inputs.properties rep_properties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand rep_properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
