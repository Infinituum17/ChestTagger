plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    // Echo Chest mod
    modImplementation "curse.maven:puzzles-lib-495476:5132274"
    modImplementation "curse.maven:echo-chest-857972:5096977"

    // Nether Chested mod
    modApi "fuzs.limitlesscontainers:limitlesscontainers-neoforge:20.4.0"
    modImplementation "curse.maven:forge-config-api-port-fabric-547434:5051716"
    modImplementation "curse.maven:new-nether-chest-857971:5097133"

    // Compact Storage mod
    modImplementation "curse.maven:compactstorage-223703:5136771"
}

processResources {
    var rep_properties = [
            "version"            : rootProject.version,
            "neoforge_version"   : rootProject.neoforge_version,
            "mc_version"         : rootProject.minecraft_version,
            "arch_version"       : rootProject.architectury_version,
            "pack_format_version": rootProject.pack_format_version,
            "modid"              : rootProject.archives_base_name
    ]

    inputs.properties rep_properties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand rep_properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

// TODO: Remove this when it's *probably* fixed with the new Loom version.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}