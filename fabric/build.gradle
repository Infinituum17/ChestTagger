plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":common").file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=labellingcontainers"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // FastConfigAPI
    modApi("infinituum.fastconfigapi:fastconfigapi-fabric:${rootProject.minecraft_version}-${rootProject.fastconfigapi_version}")

    // JEI
    def jei_version = "11.6.0.1019"
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    // Iron Chests: Restocked
    modImplementation "curse.maven:resourceful-lib-570073:4301209"
    modImplementation "curse.maven:ironchests-498794:4670971"

    def ccapiVersion = "5.0.2"

    // Echo Chest mod
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${ccapiVersion}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${ccapiVersion}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${ccapiVersion}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${ccapiVersion}"
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.11"
    modImplementation "curse.maven:puzzles-lib-495476:4600774"
    modImplementation "curse.maven:echo-chest-857972:4538163"

    // Nether Chested mod
    modImplementation "curse.maven:new-nether-chest-857971:4539462"

    // More Chests mod
    modImplementation "curse.maven:more-chests-737045:4977009"

    // More Chests Variants mod
    modImplementation "curse.maven:more-chest-variants-lieonlion-858032:4879889"

    // Variant Barrels mod
    modImplementation "curse.maven:variantbarrels-576766:4524672"

    // Compact Storage mod
    modImplementation "curse.maven:compactstorage-223703:4374192"

    // Supplementaries mod
    modImplementation "curse.maven:selene-499980:4983975"
    modImplementation "curse.maven:supplementaries-412082:5116485"
}

processResources {
    var rep_properties = [
            "version"              : rootProject.mod_version,
            "mc_version"           : rootProject.minecraft_version,
            "arch_version"         : rootProject.architectury_version,
            "modid"                : rootProject.archives_base_name,
            "fastconfigapi_version": rootProject.fastconfigapi_version
    ]

    inputs.properties rep_properties

    filesMatching("fabric.mod.json") {
        expand rep_properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
